{"version":3,"sources":["serviceWorker.js","styled.js","TableRow.js","hooks.js","index.js"],"names":["Boolean","window","location","hostname","match","StyledTable","_ref","children","react_default","a","createElement","cellSpacing","style","width","StyledTableRow","_ref2","data","change","className","id","Number","Math","round","price","toFixed","yield","TableRow","useContext","DataContext","useData","last","value","ref","useRef","hasChanged","current","useEffect","useLastValue","didChange","useDidChange","_useTimedToggle","milliseconds","_useState","useState","_useState2","Object","slicedToArray","isActive","setActive","timeoutRef","clearActiveTimeout","clearTimeout","setTimeout","useTimedToggle","_useTimedToggle2","isHighlighted","highlight","React","createContext","updateData","objectSpread","initializeData","Array","fill","map","random","toString","substring","reduce","App","setData","ids","keys","updateIn","len","length","min","floor","multiplier","pow","max","makePrice","Provider","src_TableRow","key","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9c87828.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nexport function StyledTable({ children }) {\n  return (\n    <table cellSpacing={0}>\n      <thead>\n        <tr>\n          <th style={{ width: 70 }}>ID</th>\n          <th style={{ width: 50 }}>Price</th>\n          <th style={{ width: 50 }}>Yield</th>\n        </tr>\n      </thead>\n      <tbody>\n        {children}\n      </tbody>\n    </table>\n  )\n}\n\nexport function StyledTableRow({ data, change }) {\n  return (\n    <tr className={change || ''}>\n      <td>{data.id}</td>\n      <td>\n        {Number(Math.round(data.price+'e2')+'e-2').toFixed(2)}\n      </td>\n      <td>\n        {Number(Math.round(data.yield+'e2')+'e-2').toFixed(2)}\n      </td>\n    </tr>\n  )\n}","import React, { useEffect } from 'react'\nimport { useData, useDidChange, useLastValue, useTimedToggle } from './hooks'\nimport { StyledTableRow } from './styled'\n\nfunction TableRow({ id }) {\n  let data = useData(id)\n  let last = useLastValue(data)\n  let didChange = useDidChange(data)\n  let [isHighlighted, highlight] = useTimedToggle(500)\n\n  useEffect(() => {\n    if (didChange) {\n      highlight()\n    }\n  })\n  \n  let change = last && (last.price > data.price ? 'down' : 'up')\n  \n  return (\n    <StyledTableRow\n      data={data}\n      change={isHighlighted && change}\n    />\n  )\n}\n\nexport default TableRow","import { useContext, useEffect, useRef, useState } from 'react'\nimport { DataContext } from './index'\n\nexport function useLastValue(value) {\n  let ref = useRef([])\n  let hasChanged = ref.current[1] !== value\n  useEffect(() => {\n    if (hasChanged) {\n      ref.current[0] = ref.current[1]\n      ref.current[1] = value\n    }\n  })\n  return hasChanged ? ref.current[1] : ref.current[0]\n}\n\nexport function useDidChange(value) {\n  let ref = useRef()\n  let hasChanged = ref.current !== value\n  useEffect(() => {\n    ref.current = value\n  })\n  return hasChanged\n}\n\nexport function useTimedToggle(milliseconds) {\n  let [isActive, setActive] = useState(false)\n  let timeoutRef = useRef()\n  \n  function clearActiveTimeout() {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current)\n    }\n  }\n  \n  function activate() {\n    clearActiveTimeout()\n    setActive(true)\n    timeoutRef.current = window.setTimeout(() => {\n      setActive(false)\n    }, milliseconds)\n  }\n  \n  // When the component is unmounted, make sure to clear the timeout. \n  useEffect(() => clearActiveTimeout, [])\n  \n  return [isActive, activate]\n}\n\nexport function useData(id) {\n  let data = useContext(DataContext)\n  return data[id]\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\n//import logo from './logo.svg';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport { StyledTable } from './styled'\nimport TableRow from './TableRow'\nimport { useState } from 'react';\n\nexport let DataContext = React.createContext()\n\nfunction updateData(data, id, price) {\n  data = { ...data }\n  data[id] = {\n    id,\n    price,\n    yield: price > 0 ? (5 / price * 100) : 0,\n  }\n  return data\n}\n\nfunction makePrice(price) {\n  let multiplier = Math.min(1.25, Math.pow(72/price, 4))\n  return Math.max(0,\n    price +\n    multiplier*(\n      Math.random() -\n      (price-49)/100 +\n      (price > 95\n        ? 0.01\n        : -Math.pow(multiplier, 3)\n      ) +\n      (price > 0 && Math.random() > price/101 ? (Math.random()-0.5) * 10 : 0)\n    )\n  )\n}\n\nfunction initializeData() {\n  let ids = new Array(10)\n    .fill()\n    .map(() => Math.random().toString(36).substring(7))\n  let data = ids.reduce(\n    (data, id) => updateData(data, id, 83 + Math.random() * 18),\n    {}\n  )\n  return data\n}\n\nfunction App() {\n  let [data, setData] = useState(initializeData)\n  let ids = Object.keys(data)\n  let updateIn = Math.random() * 2000\n  \n  setTimeout(() => {\n    let len = ids.length\n    let id = ids[Math.min(Math.floor(Math.random() * len), len-1)]\n    setData(updateData(data, id, makePrice(data[id].price)))\n  }, updateIn)\n\n  return (\n    <DataContext.Provider value={data}>\n      <StyledTable>\n        {ids.map(id =>\n          <TableRow key={id} id={id} />\n        )}\n      </StyledTable>\n    </DataContext.Provider>\n  )\n}\n\n\nexport default App;\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}